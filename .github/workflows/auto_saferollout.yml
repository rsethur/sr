name: auto-saferollout
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["train"]
    types: [completed]

env:
  RC_DEPLOYMENT_NAME: run${{ github.run_number }}
  METRICS_VALIDATION_INTERVAL_MINS: 5
  LOAD_GENERATOR_DURATION: 70m #minutes
  
jobs:
  
  rollout_10pct_traffic:
    name: Rollout 10% traffic
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'}}
    outputs:
      first_run: ${{ steps.create_initial_prod.outputs.first_run }}
    steps:
    - name: Configure endpoint files
      run: |
        echo "ENDPOINT_FILE=endpoint/endpoint.yml" >> $GITHUB_ENV
        echo "DEPLOYMENT_FILE=endpoint/deployment.yml" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@v2.3.3
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Set defaults
      run: |
        az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
        az config set defaults.group=${{secrets.RESOURCE_GROUP}}
        az account set -s ${{secrets.SUBSCRIPTION_ID}}  
    - name: Install azureml cli extension
      run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
      #run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
            
    - name: Download latest model details
      uses: dawidd6/action-download-artifact@v2      
      with:
        name: latest-model
        workflow: train.yml
        #workflow_conclusion: success
    - name: Get latest model id
      run: |
        export LATEST_MODEL=$(<latest-model.txt)
        echo "LATEST_MODEL=$LATEST_MODEL" >> $GITHUB_ENV
    # step 1: validation and day1 scenarios
    - name: Step 1a-If endpoint does not exist, create
      run: |
        az ml online-endpoint create --name ${{secrets.ENDPOINT_NAME }} -f ${{ env.ENDPOINT_FILE }}
        export ENDPOINT_EXISTS=$(az ml online-endpoint list -o tsv --query "[?name=='${{secrets.ENDPOINT_NAME }}'][name]" |  wc -l)
        if [[ ENDPOINT_EXISTS -ne 1 ]]; then
          az ml online-endpoint create -n ${{secrets.ENDPOINT_NAME }} -f ${{ env.ENDPOINT_FILE }}          
        else
          echo "endpoint ${{secrets.ENDPOINT_NAME }} exists"
        fi
    
    # Step 1b - If prod does not exist, create the RC as prod. Else If PROD exists validate if it has 100%.
    - id: create_initial_prod
      name: Step 1c-if PROD does not exist, create RC as PROD              
      run: |        
        # Get the name of prod deployment
        export PROD_DEPLOYMENT=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")
        echo PROD DEPL is $PROD_DEPLOYMENT
        echo size ${#PROD_DEPLOYMENT}
        echo 1111
        az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT"
        echo 2222
        az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }}

        echo "PROD_DEPLOYMENT=$PROD_DEPLOYMENT" >> $GITHUB_ENV
        if [[ -z "$PROD_DEPLOYMENT" ]]; then
          echo "prod deployment does not exist - creating it"
          export PROD_DEPLOYMENT=${{ env.RC_DEPLOYMENT_NAME }}
          az ml online-deployment create --name ${{ env.RC_DEPLOYMENT_NAME }} --endpoint ${{secrets.ENDPOINT_NAME }} -f ${{ env.DEPLOYMENT_FILE }} --all-traffic --set model=${{ env.LATEST_MODEL }}
          az ml online-endpoint update --name ${{secrets.ENDPOINT_NAME }} --set tags.PROD_DEPLOYMENT=$PROD_DEPLOYMENT          
          echo "It is expected to fail in the first run since we want to stop after deployment creation as there is no saferollout (since github action does not allow with exit 0)"
          echo "::set-output name=first_run::true"
          # github action does not allow with exit 0.
          exit 1
        else # validate if PROD  has 100%.
          echo "validating if prod as 100%"
          export PROD_TRAFFIC=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query traffic.$PROD_DEPLOYMENT)
          if [[ $PROD_TRAFFIC -ne '100' ]]; then echo "Error: For this saferollout script to start, traffic to prod deployment needs to be 100%"; exit 1; fi   
        fi
    - name: Step 2-Create RC deployment
      run: |          
        az ml online-deployment create --name ${{ env.RC_DEPLOYMENT_NAME }} --endpoint ${{secrets.ENDPOINT_NAME }} -f ${{ env.DEPLOYMENT_FILE }} --all-traffic --set model=${{ env.LATEST_MODEL }}
         
    - name: Step 3-Divert 10% traffic to RC
      run: | 
        az ml online-endpoint update -n ${{secrets.ENDPOINT_NAME }} --traffic ${{ env.PROD_DEPLOYMENT }}:90,${{ env.RC_DEPLOYMENT_NAME }}:10

  rollout_50pct_traffic:
    needs: [rollout_10pct_traffic, validate_errors_within_threshold_10pct_traffic, validate_latency_within_threshold_10pct_traffic]
    if: ${{ needs.rollout_10pct_traffic.outputs.first_run }}
    name: Rollout 50% traffic    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      
      
      - name: Install azureml cli extension
        run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
      - name: Divert 50% traffic to RC
        run: | 
          export PROD_DEPLOYMENT=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")          
          az ml online-endpoint update -n ${{secrets.ENDPOINT_NAME }} --traffic $PROD_DEPLOYMENT:50,${{ env.RC_DEPLOYMENT_NAME }}:50

  rollout_100pct_traffic:
    needs: [validate_errors_within_threshold_50pct_traffic, validate_latency_within_threshold_50pct_traffic]
    name: Rollout 100% traffic    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      - name: Install azureml cli extension
        run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
      - name: Divert 100% traffic to RC and mark RC as PROD, PROD as OLD_PROD
        run: | 
          export PROD_DEPLOYMENT=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")          
          az ml online-endpoint online-update -n ${{secrets.ENDPOINT_NAME }} --traffic $PROD_DEPLOYMENT:0,${{ env.RC_DEPLOYMENT_NAME }}:100 --set tags.PROD_DEPLOYMENT=${{ env.RC_DEPLOYMENT_NAME }} tags.OLD_PROD_DEPLOYMENT=$PROD_DEPLOYMENT

  delete_old_prod:
    needs: [validate_errors_within_threshold_100pct_traffic, validate_latency_within_threshold_100pct_traffic]
    name: Delete old prod deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      - name: Install azureml cli extension
        run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
      - name: Divert 100% traffic to RC and mark RC as PROD, PROD as OLD_PROD
        run: | 
          export OLD_PROD_DEPLOYMENT=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.OLD_PROD_DEPLOYMENT")          
          az ml online-deployment delete --endpoint ${{secrets.ENDPOINT_NAME }} --deployment $OLD_PROD_DEPLOYMENT --yes --no-wait
          az ml online-endpoint update -n ${{secrets.ENDPOINT_NAME }} --remove tags.OLD_PROD_DEPLOYMENT

  ############## auto validation of metrics ################
  validate_errors_within_threshold_10pct_traffic:
    needs: rollout_10pct_traffic
    name: Validate errors within threshold @ 10% traffic
    environment:
      name: auto_rollout_50pct_traffic
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}          
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
    # Validate there are no errors(10% traffic)
      - name: Validate errors within theshold
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate errors (10pct traffic)"
          chart_save_path: "/home/runner/chart-output/error"
          metric: RequestsPerMinute
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}' and statusCodeClass ne '2xx'"
          threshold: 1
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-errors-at-10pct_traffic
          path: "/home/runner/chart-output/error"
  
  validate_errors_within_threshold_50pct_traffic:
    needs: rollout_50pct_traffic
    name: Validate errors within threshold @ 50% traffic
    environment:
      name: auto_rollout_100pct_traffic
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}          
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
    # Validate there are no errors(50% traffic)
      - name: Validate errors within theshold
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate errors (50pct traffic)"
          chart_save_path: "/home/runner/chart-output/error"
          metric: RequestsPerMinute
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}' and statusCodeClass ne '2xx'"
          threshold: 0
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-errors-at-50pct_traffic
          path: "/home/runner/chart-output/error"   
  
  validate_errors_within_threshold_100pct_traffic:
    needs: rollout_100pct_traffic
    name: Validate errors within threshold @ 100% traffic
    environment:
      name: auto_delete_old_prod
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}          
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
    # Validate there are no errors(100% traffic)
      - name: Validate errors within theshold
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate errors (100pct traffic)"
          chart_save_path: "/home/runner/chart-output/error"
          metric: RequestsPerMinute
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}' and statusCodeClass ne '2xx'"
          threshold: 0
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-errors-at-100pct_traffic
          path: "/home/runner/chart-output/error"


  validate_latency_within_threshold_10pct_traffic:
    needs: rollout_10pct_traffic
    environment:
      name: auto_rollout_50pct_traffic
    name: Validate latency within threshold @ 10% traffic
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
      # Validate latency within threshold 
      - name: Validate latency within threshold 
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate latency (10pct traffic)"
          chart_save_path: "/home/runner/chart-output/latency"
          metric: RequestLatency_P90
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}'"
          threshold: 50
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-latency-at-10pct_traffic
          path: "/home/runner/chart-output/latency"

  validate_latency_within_threshold_50pct_traffic:
    needs: rollout_50pct_traffic
    environment:
      name: auto_rollout_100pct_traffic
    name: Validate latency within threshold @ 50% traffic
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
      # Validate latency within threshold 
      - name: Validate latency within threshold 
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate latency (50pct traffic)"
          chart_save_path: "/home/runner/chart-output/latency"
          metric: RequestLatency_P90
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}'"
          threshold: 50
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-latency-at-50pct_traffic
          path: "/home/runner/chart-output/latency"

  validate_latency_within_threshold_100pct_traffic:
    needs: rollout_100pct_traffic
    environment:
      name: auto_delete_old_prod
    name: Validate latency within threshold @ 100% traffic
    runs-on: ubuntu-latest
    steps:
      - run: |
          export RESOURCE_ID=/subscriptions/${{secrets.SUBSCRIPTION_ID}}/resourceGroups/${{secrets.RESOURCE_GROUP}}/providers/Microsoft.MachineLearningServices/workspaces/${{secrets.AML_WORKSPACE}}/onlineEndpoints/${{secrets.ENDPOINT_NAME}}
          echo "RESOURCE_ID=$RESOURCE_ID" >> $GITHUB_ENV
      # Validate latency within threshold 
      - name: Validate latency within threshold 
        uses: rsethur/validate-metrics@v1.0.44
        continue-on-error: false
        with:
          chart_name: "Validate latency (100pct traffic)"
          chart_save_path: "/home/runner/chart-output/latency"
          metric: RequestLatency_P90
          aggregation: Average
          metrics_condition: lte
          interval: PT1M
          num_intervals: ${{env.METRICS_VALIDATION_INTERVAL_MINS}}
          filter: "deployment eq '${{ env.RC_DEPLOYMENT_NAME }}'"
          threshold: 50
          resource_id: ${{ env.RESOURCE_ID }}
        env:
          AZURE_CREDENTIALS: ${{secrets.AZURE_CREDENTIALS}}
      # Upload the chart as an artifact to the workflow run
      - uses: actions/upload-artifact@v2
        with:
          name: validate-latency-at-100pct_traffic
          path: "/home/runner/chart-output/latency"
  
  generate_live_traffic:
    name: Generate live endpoint traffic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: Install azureml cli extension
        run: az extension add --source https://azuremlsdktestpypi.blob.core.windows.net/wheels/sdk-cli-v2/ml-0.0.15_october_cand-py3-none-any.whl --yes
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}   

      - name: Install load generator
        run: |
          wget https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz
          tar -xvf vegeta_12.8.4_linux_amd64.tar.gz
      - name: "Open live traffic"
        run: |
          ENDPOINT_URI=$(az ml online-endpoint show -n ${{secrets.ENDPOINT_NAME}} -o tsv --query scoring_uri)        
          echo $ENDPOINT_URI
          ENDPOINT_TOKEN=$(az ml online-endpoint get-credentials -n ${{secrets.ENDPOINT_NAME}} -o tsv --query primaryKey)
          echo "POST $ENDPOINT_URI" | ./vegeta attack -body test/sample-request.json -header "Content-Type: application/json" -header "authorization: Bearer $ENDPOINT_TOKEN" -rate=15 -duration ${{env.LOAD_GENERATOR_DURATION}} -output loadtest.out 