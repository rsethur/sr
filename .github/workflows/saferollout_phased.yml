name: phased-saferollout
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["register-model"]
    types: [completed]

env:
  RC_DEPLOYMENT_NAME: run${{ github.run_number }}
jobs:
  
  rollout_10pct_traffic:
    name: rollout_10pct_traffic
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'}}
    steps:
    - name: Configure endpoint files
      run: |
        echo "ENDPOINT_FILE=endpoint/endpoint.yml" >> $GITHUB_ENV
        echo "DEPLOYMENT_FILE=endpoint/deployment.yml" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@v2.3.3
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_TOKEN}}
    - name: Set defaults
      run: |
        az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
        az config set defaults.group=${{secrets.RESOURCE_GROUP}}
        az account set -s ${{secrets.SUBSCRIPTION_ID}}  
    - name: Install azureml cli extension
      run: az extension add -n ml -y
    
    - name: Download latest model details
      uses: dawidd6/action-download-artifact@v2      
      with:
        name: latest-model
        workflow: register_model.yml
        #workflow_conclusion: success
    - name: Get latest model id
      run: |
        export LATEST_MODEL=$(<latest-model.txt)
        echo "LATEST_MODEL=$LATEST_MODEL" >> $GITHUB_ENV
    # step 1: validation and day1 scenarios
    - name: Step 1a-If endpoint does not exist, create
      run: |
        export ENDPOINT_EXISTS=$(az ml endpoint list -o tsv --query "[?name=='${{secrets.ENDPOINT_NAME }}'][name]" |  wc -l)
        if [[ ENDPOINT_EXISTS -ne 1 ]]; then
          az ml endpoint create -n ${{secrets.ENDPOINT_NAME }} -f ${{ env.ENDPOINT_FILE }}
        else
          echo "endpoint ${{secrets.ENDPOINT_NAME }} exists"
        fi

    - name: Step 1b-validate new deployment name does not exiat
      run: |
        export RC_DEPLOYMENT_EXISTS=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "deployments[?name == '${{ env.RC_DEPLOYMENT_NAME }}'].name" |  wc -l)
        if [[ RC_DEPLOYMENT_EXISTS -eq 1 ]]; then
        echo "deployment with name ${{ env.RC_DEPLOYMENT_NAME }} already exists. Exiting."
        exit 1
        fi
    
      # Step 1c - If prod does not exist, create the RC as prod. Else If PROD exists validate if it has 100%.
    - name: Step 1c-if PROD does not exist, create RC as PROD
      run: |
        # get number of deployments
        export NUM_DEPLOYMENTS=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query 'deployments | length(@)' | tr -d "\r")
        echo "NUM_DEPLOYMENTS=$NUM_DEPLOYMENTS" >> $GITHUB_ENV
        # This below limitation will go with GA release
        if [[ $NUM_DEPLOYMENTS -gt '1' ]]; then echo "Error: Only one deployment (PROD) can exist"; exit 1; fi
        # Get the name of prod deployment
        export PROD_DEPLOYMENT=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")
        echo "PROD_DEPLOYMENT=$PROD_DEPLOYMENT" >> $GITHUB_ENV
        if [[ -z "$PROD_DEPLOYMENT" ]]; then
          export PROD_DEPLOYMENT=${{ env.RC_DEPLOYMENT_NAME }}  
          az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --deployment $PROD_DEPLOYMENT --deployment-file ${{ env.DEPLOYMENT_FILE }} --set deployments[$NUM_DEPLOYMENTS].model=${{ env.LATEST_MODEL }} --traffic $PROD_DEPLOYMENT:100 --set tags.PROD_DEPLOYMENT=$PROD_DEPLOYMENT
          # github action does not allow with exit 0. todo: put if condition on other steps to remove this "exit 1"
          exit 1
        else # validate if PROD  has 100%.
          export PROD_TRAFFIC=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query traffic.$PROD_DEPLOYMENT)
          if [[ $PROD_TRAFFIC -ne '100' ]]; then echo "Error: traffic to prod deployment needs to be 100%"; exit 1; fi   
        fi
    - name: Step 2-Create RC deployment
      run: |          
        az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --deployment ${{ env.RC_DEPLOYMENT_NAME }} --deployment-file ${{ env.DEPLOYMENT_FILE }} --set deployments[${{ env.NUM_DEPLOYMENTS }}].model=${{ env.LATEST_MODEL }} --traffic "${{ env.PROD_DEPLOYMENT }}:100,${{ env.RC_DEPLOYMENT_NAME }}:0"
 
    - name: Step 3-Divert 10% traffic to RC
      run: | 
        az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --traffic ${{ env.PROD_DEPLOYMENT }}:90,${{ env.RC_DEPLOYMENT_NAME }}:10
        # run some tests
        # TODO - insert test script here

  rollout_50pct_traffic:
    needs: rollout_10pct_traffic
    name: rollout_50pct_traffic
    environment:
      name: rollout_50pct_traffic
      url: http://ml.azure.com
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_TOKEN}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      - name: Install azureml cli extension
        run: az extension add -n ml -y
      - name: Divert 50% traffic to RC
        run: | 
          export PROD_DEPLOYMENT=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")          
          az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --traffic $PROD_DEPLOYMENT:50,${{ env.RC_DEPLOYMENT_NAME }}:50

  rollout_100pct_traffic:
    needs: rollout_50pct_traffic
    name: rollout_100pct_traffic
    environment:
      name: rollout_100pct_traffic
      url: http://ml.azure.com
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_TOKEN}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      - name: Install azureml cli extension
        run: az extension add -n ml -y
      - name: Divert 100% traffic to RC and mark RC as PROD, PROD as OLD_PROD
        run: | 
          export PROD_DEPLOYMENT=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.PROD_DEPLOYMENT")          
          az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --traffic $PROD_DEPLOYMENT:0,${{ env.RC_DEPLOYMENT_NAME }}:100 --set tags.PROD_DEPLOYMENT=${{ env.RC_DEPLOYMENT_NAME }} tags.OLD_PROD_DEPLOYMENT=$PROD_DEPLOYMENT

  delete_old_prod:
    needs: rollout_100pct_traffic
    name: delete_old_prod
    environment:
      name: delete_old_prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_TOKEN}}
      - name: Set defaults
        run: |
          az config set defaults.workspace=${{secrets.AML_WORKSPACE}}
          az config set defaults.group=${{secrets.RESOURCE_GROUP}}
          az account set -s ${{secrets.SUBSCRIPTION_ID}}
      - name: Install azureml cli extension
        run: az extension add -n ml -y
      - name: Divert 100% traffic to RC and mark RC as PROD, PROD as OLD_PROD
        run: | 
          export OLD_PROD_DEPLOYMENT=$(az ml endpoint show -n ${{secrets.ENDPOINT_NAME }} -o tsv --query "tags.OLD_PROD_DEPLOYMENT")          
          az ml endpoint delete -n ${{secrets.ENDPOINT_NAME }} --deployment $OLD_PROD_DEPLOYMENT --yes #--no-wait
          az ml endpoint update -n ${{secrets.ENDPOINT_NAME }} --remove tags.OLD_PROD_DEPLOYMENT